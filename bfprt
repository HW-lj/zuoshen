1.将数组分成长度为5的N/5个子数组
2.将每个子数组排序
3.取出每个数组中的中位数，构成一个长度为N/5的新数组
4.递归调用该函数，入参改为N/5，数组长度除以2
5.将4中的返回值作为partion值，重新进行bfprt

int getMinKthByBFPRT(vector<int>arr, int K) {
    int temp = arr;
    return bfprt(temp, 0, temp.length() - 1; K - 1)
}

int bfprt(vector<int>arr, int begin, int end, int i) {
    if(begin == end) 
        return arr[begin];
    int pivot = medianOfMediums(arr, begin, end);
    vector<int> pivotRange = partition(arr, begin, end, pivot);
    if (i >= pivotRange[0] && i <= pivotRange[1])
        return arr[i];
    else if (i < pivotRange[0])
        return bfprt(arr, begin, pivotRange[0] - 1, i);
    else
        return bfprt(arr, pivotRange[1] + 1, end, i);
}

int medianOfMediums(vector<int> arr, int begin, int end) {
    int num = end - begin + 1;
    int offset = num % 5 == 0 ? 0 : 1;
    vector<in5> mArr(num/5+ offset);
    for (int i = 0; i < mArr.length(); i++) {
        int beginI = begin + %*i;
        int endI = beginI + 4;
        mArr[i] = getMedian(arr, beginI, min(end, endI));
    }
    return bfprt(mArr, 0, mArr.length() - 1, mArr.length() / 2);
}
vector<int> partition(vector<int>arr, int begin, int end, int pivotValue) {
    int small = begin - 1;
    int cur = begin;
    int big = end + 1;
    while(cur != big) {
        if(arr[cur] < pivotValue)
            swap(arr, ++small, cur++);
        else if(arr[cur] > pivotValue)
            swap(arr, cur, --big);
        else
            cul++;
    }
    vector<int> range(2);
    range[0] = small + 1;
    range[1] = big - 1;
    return range;
}

int getMedian(vector<int>arr, int begin, int end) {
    sort (arr.begin()+bgein, arr.end()+end);
	return arr[(end - begin) /2];
}
